<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>做通知系统遇到的坑</title>
    <url>/2020/01/26/notification_system/</url>
    <content><![CDATA[<p><strong>todo</strong></p>
]]></content>
      <tags>
        <tag>notification</tag>
      </tags>
  </entry>
  <entry>
    <title>Oh My Zsh 使用</title>
    <url>/2020/01/26/oh_my_zsh/</url>
    <content><![CDATA[<h2 id="Oh-My-Zsh"><a href="#Oh-My-Zsh" class="headerlink" title="Oh My Zsh"></a>Oh My Zsh</h2><blockquote>
<p>shell的类型有很多种，mac、linux下默认的是bash，bash的提示功能不够强大，界面也不够炫；而zsh 本体有着强大的功能，但碍于其复杂的配置，对普通用户而言并不太适合。 <strong>Oh My Zsh</strong> 的出现打破了这一局面，你只需要进行极为简单的安装配置，就可以用上 Zsh。</p>
</blockquote>
<a id="more"></a> 
<h2 id="安装-Oh-My-Zsh"><a href="#安装-Oh-My-Zsh" class="headerlink" title="安装 Oh My Zsh"></a>安装 Oh My Zsh</h2><h3 id="mac安装"><a href="#mac安装" class="headerlink" title="mac安装"></a>mac安装</h3><blockquote>
<p>因为 macOS Mojave 已经自带了 Zsh，所以可以直接安装 Oh My Zsh。执行一行命令。</p>
</blockquote>
<pre class=" language-$xslt"><code class="language-$xslt"></code></pre>
<pre><code>sh -c &quot;$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)&quot;
</code></pre><blockquote>
<p>在安装过程中会提示 Do you want to change your default shell to zsh? [Y/n]（是否将默认 Shell 切换到 Zsh），按下 Y 并回车即可。当你看见大大的 Oh my zsh 标志时就表示 Oh My Zsh 已经安装成功了。</p>
</blockquote>
<h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><blockquote>
<p>安装完成后 会生成 .zshrc 文件，编辑 .zshrc 文件</p>
</blockquote>
<pre><code>vim ~/.zshrc
</code></pre><blockquote>
<p>里面有详细的注释解释 这里就不赘述了。编辑完成后。执行命令（reload config）</p>
</blockquote>
<pre><code>source ~/.zshrc</code></pre><h2 id="idea使用zsh终端"><a href="#idea使用zsh终端" class="headerlink" title="idea使用zsh终端"></a>idea使用zsh终端</h2><p><img src="/images/ideazsh.png" alt=""></p>
<h2 id="bash-切换到-zsh-环境变量丢失问题"><a href="#bash-切换到-zsh-环境变量丢失问题" class="headerlink" title="bash 切换到 zsh 环境变量丢失问题"></a>bash 切换到 zsh 环境变量丢失问题</h2><ol>
<li><p>在bash下面执行:</p>
<pre><code>echo $PATH</code></pre><blockquote>
<p>查看系统路径，复制路径。</p>
</blockquote>
</li>
<li><p>然后切换到zsh</p>
<pre><code>sudo vim ~/.zshrc</code></pre></li>
</ol>
<blockquote>
<p>在 If you come from bash you might have to change your $PATH.下面添加刚才的路径:</p>
</blockquote>
<pre><code>export PATH=&quot; you path copy just now &quot;</code></pre><ol start="3">
<li>保存文件，在zsh下执行:<pre><code>source ~/.zshrc</code></pre></li>
</ol>
]]></content>
      <tags>
        <tag>shell</tag>
        <tag>zsh</tag>
      </tags>
  </entry>
  <entry>
    <title>OIDC、SAML主流SSO协议介绍</title>
    <url>/2019/12/29/OIDC_SAML/</url>
    <content><![CDATA[<h2 id="OIDC-（OpenID-Connect）"><a href="#OIDC-（OpenID-Connect）" class="headerlink" title="OIDC （OpenID Connect）"></a>OIDC （OpenID Connect）</h2><blockquote>
<p>一种基于OAuth2协议的身份认证标准协议<br>近期在实现OIDC SP Initiated， 之前有接触过实现一个OIDC Server，对 well-known 接口以及 authorization_endpoint、token_endpoint、userinfo_endpoint、jwks_uri 等接口的实现比较熟悉，<br>定义了类似于SAML Metadata的Discovery接口（well-known接口）。所以在一个支持OIDC的SP的配置页面，通常要求配置OIDC服务端的well-known url 或者配置well-known 接口中 相关的 endpoint。</p>
</blockquote>
<blockquote>
<blockquote>
<p>最终实现的场景是 —&gt; 我们的服务进行简单配置后 可以通过任何实现了OIDC Server 的第三方IDP登录。</p>
</blockquote>
</blockquote>
<a id="more"></a> 


<blockquote>
<p>对于标准 OIDC 协议以及相关接口实现不太了解的同学移步 <a href="https://openid.net/specs/openid-connect-core-1_0.html#" target="_blank" rel="noopener">OpenId connect</a> </p>
</blockquote>
<h3 id="authorization-endpoint"><a href="#authorization-endpoint" class="headerlink" title="authorization_endpoint"></a>authorization_endpoint</h3><blockquote>
<p>向 OIDC Server 发起 authorize 请求 </p>
</blockquote>
<pre><code>

 Request 

   GET /authorize?
      response_type=id_token%20code
      &amp;client_id=*
      &amp;redirect_uri=https%3A%2F%2Fclient.example.org
      &amp;scope=openid%20profile
      &amp;state=*
      &amp;nonce=n-0S6_WzA2Mj HTTP/1.1
    Host: server.example.com

    REQUIRED：response_type、redirect_uri

 Response

   HTTP/1.1 302 Found
     Location: https://client.example.org?
       code=*
       &amp;state=af0ifjsldkj 
</code></pre><ol>
<li>Request</li>
</ol>
<ul>
<li>response_type: code模式下 OIDC Server 认证完回调后 会带上一个可供一次性消费的code（通过 token_endpoint 获取 accessToken时 使用）</li>
<li>scope: 获取的userInfo 以及 id_token 中会以此来返回你需要信息。以空格进行分隔，必须至少包含openid  </li>
<li>redirect_uri: OIDC Server 会回调过来的地址 必须与OIDC Server 端，填写的保持一致</li>
</ul>
<ol start="2">
<li>Response</li>
</ol>
<blockquote>
<p>OIDC server 端接收到 authorize 请求后，认证通过会回跳到 Request 中的 redirect_uri 的地址 并携带上 response_type 中传的 code 或 id_token 以及 带上 request中的 state </p>
</blockquote>
<h3 id="token-endpoint"><a href="#token-endpoint" class="headerlink" title="token_endpoint"></a>token_endpoint</h3><blockquote>
<p>获取 accessToken、id_token （authorization_code 授权码模式为例）</p>
</blockquote>
<pre><code>

 Request 

   POST /token HTTP/1.1
     Host: server.example.com
     Content-Type: application/x-www-form-urlencoded
     Authorization: Basic ***
     grant_type=authorization_code&amp;code=*&amp;redirect_uri=*

 Response

   HTTP/1.1 200 OK
   Content-Type: application/json
   Cache-Control: no-store
   Pragma: no-cache

   {
    &quot;access_token&quot;: &quot;&quot;,
    &quot;token_type&quot;: &quot;Bearer&quot;,
    &quot;refresh_token&quot;: &quot;&quot;,
    &quot;expires_in&quot;: 3600,
    &quot;id_token&quot;: &quot;&quot;
   }
</code></pre><ol>
<li>Request</li>
</ol>
<ul>
<li>grant_type: 对于使用code 获取的形式 传值 authorization_code (其他形式 password 、refresh_token、implicit)</li>
<li>code: authorize 请求中 获取到的code  </li>
<li>redirect_uri: OIDC Server 会回调过来的地址 必须与OIDC Server 端，填写的保持一致</li>
</ul>
<ol start="2">
<li>Response</li>
</ol>
<ul>
<li>access_token: 可以通过userinfo_endpoint获取user信息</li>
<li>token_type: 使用access_token 的 auth 方式</li>
<li>expires_in: 有效期</li>
<li>id_token: <strong>在使用 id_token 时，需要对 id_token 进行验签 此时会使用到 jwks_uri endpoint 来获取公钥</strong></li>
</ul>
<h3 id="userinfo-endpoint"><a href="#userinfo-endpoint" class="headerlink" title="userinfo_endpoint"></a>userinfo_endpoint</h3><blockquote>
<p>获取用户详细信息</p>
</blockquote>
<pre><code>
 Request 

   GET /userinfo HTTP/1.1
   Host: server.example.com
   Authorization: Bearer accessToken


 Response

   HTTP/1.1 200 OK
   Content-Type: application/json
   {
     &quot;sub&quot;: &quot;&quot;,
     &quot;name&quot;: &quot;&quot;,
     &quot;given_name&quot;: &quot;&quot;,
     &quot;family_name&quot;: &quot;&quot;,
     &quot;preferred_username&quot;: &quot;&quot;,
     &quot;email&quot;: &quot;&quot;,
     &quot;picture&quot;: &quot;&quot;
   }
</code></pre><h3 id="至此，我们已经可以完成实现的场景"><a href="#至此，我们已经可以完成实现的场景" class="headerlink" title="至此，我们已经可以完成实现的场景"></a>至此，我们已经可以完成实现的场景</h3><blockquote>
<p>我们的服务进行简单配置后 可以通过任何实现了OIDC Server 的第三方IDP登录。</p>
</blockquote>
<ol>
<li>第一步 我们向 OIDC server 发起 authorize 请求 </li>
<li>OIDC server 接收到请求后 会 回跳到 传入redirect_uri，我们需要实现 redirect_uri 接口，用来处理我们server的逻辑</li>
<li>通过 id_token 或者 userInfo JIT 创建（获取通过规则匹配到我们server下的用户）出来 我们server 下的用户</li>
<li>实现 通过 第三方 OIDC server IDP 登录我们的系统</li>
</ol>
<h2 id="SAML-（Security-Assertion-Markup-Language）"><a href="#SAML-（Security-Assertion-Markup-Language）" class="headerlink" title="SAML （Security Assertion Markup Language）"></a>SAML （Security Assertion Markup Language）</h2><blockquote>
<p>一种基于基于XML的标准数据格式，同时也可以认为是一种基于XML的协议<br>自2002年11月SAML1.0被OASIS采纳为OASIS标准后，SAML又进行了两次版本升级。SAML1.1在2003年9月被批准为OASIS标准，SAML2.0在2005年3月被批准为OASIS标准</p>
</blockquote>
<h3 id="SAML协议的简单流程"><a href="#SAML协议的简单流程" class="headerlink" title="SAML协议的简单流程"></a>SAML协议的简单流程</h3><blockquote>
<p>SAML中主要定义了三个角色 <strong>identity provider</strong>(简称 <strong>IDP</strong>)、<strong>service provider(简称 **SP</strong>)<strong>、</strong>principal**(可以认为是使用者)</p>
</blockquote>
<p><img src="/images/SAML.png" alt=""></p>
<blockquote>
<blockquote>
<p>上图既是SAML协议的完整认证流程</p>
</blockquote>
</blockquote>
<ul>
<li>a.用户请求SP，如访问jira。</li>
<li>b.SP接收到请求之后，携带SAMLRequest重定向到IDP处（SAMLRequest的格式后面会给出）。</li>
<li>c.IDP接收到SAMLRequest后，会在IDP验证用户身份，检查当前用户是否登录，如果未登录跳转登录页面。</li>
<li>d.IDP验证身份通过后，会返回SAMLResource（SAMLResponse的格式后面会给出）。</li>
<li>e.SP验证SAMLResponse，验证通过后取出SAMLResponse里携带的用户信息，访问对应的用户。</li>
</ul>
<h3 id="SAML-数据格式"><a href="#SAML-数据格式" class="headerlink" title="SAML 数据格式"></a>SAML 数据格式</h3><h4 id="SAMLRequest"><a href="#SAMLRequest" class="headerlink" title="SAMLRequest"></a>SAMLRequest</h4><pre><code>&lt;samlp:AuthnRequest
    xmlns:samlp=&quot;urn:oasis:names:tc:SAML:2.0:protocol&quot;
    xmlns:saml=&quot;urn:oasis:names:tc:SAML:2.0:assertion&quot;
    ID=&quot;_5eee6e65-e4e6-43cf-9ed3-6e7abdff262d&quot;
    Version=&quot;2.0&quot;
    IssueInstant=&quot;2020-01-01T00:00:00&quot;
    AssertionConsumerServiceIndex=&quot;0&quot;
    AttributeConsumingServiceIndex=&quot;0&quot;&gt;
    &lt;saml:Issuer&gt;https://www.***.com&lt;/saml:Issuer&gt;
    &lt;samlp:NameIDPolicy
      AllowCreate=&quot;true&quot;
      Format=&quot;urn:oasis:names:tc:SAML:2.0:nameid-format:transient&quot;/&gt;
  &lt;/samlp:AuthnRequest&gt;
</code></pre><h4 id="SAMLResponse-（SAML2-0）"><a href="#SAMLResponse-（SAML2-0）" class="headerlink" title="SAMLResponse （SAML2.0）"></a>SAMLResponse （SAML2.0）</h4><pre><code>
&lt;samlp:Response
    xmlns:samlp=&quot;urn:oasis:names:tc:SAML:2.0:protocol&quot;
    xmlns:saml=&quot;urn:oasis:names:tc:SAML:2.0:assertion&quot;
    ID=&quot;_592c022f-e85e-4d23-b55b-9141c95cd2a5&quot;
    InResponseTo=&quot;_049917a6-1183-42fd-a190-1d2cbaf9b144&quot;
    Version=&quot;2.0&quot;
    IssueInstant=&quot;2020-01-01T00:00:00Z&quot;
    Destination=&quot;https://sp.example.com/SAML2/SSO/POST&quot;&gt;
    &lt;saml:Issuer&gt;https://www.***.com&lt;/saml:Issuer&gt;
    &lt;samlp:Status&gt;
      &lt;samlp:StatusCode
        Value=&quot;urn:oasis:names:tc:SAML:2.0:status:Success&quot;/&gt;
    &lt;/samlp:Status&gt;
    &lt;saml:Assertion
      xmlns:saml=&quot;urn:oasis:names:tc:SAML:2.0:assertion&quot;
      ID=&quot;_82b251d1-4796-46d3-b903-c85c9ae49172&quot;
      Version=&quot;2.0&quot;
      IssueInstant=&quot;2019-01-01T01:00:00Z&quot;&gt;
      &lt;saml:Issuer&gt;https://www.***.com&lt;/saml:Issuer&gt;
      &lt;!-- a POSTed assertion MUST be signed --&gt;
      &lt;ds:Signature     xmlns:ds=&quot;http://www.w3.org/2000/09/xmldsig#&quot;&gt;...&lt;/ds:Signature&gt;
      &lt;saml:Subject&gt;
        &lt;saml:NameID
          Format=&quot;urn:oasis:names:tc:SAML:2.0:nameid-format:transient&quot;&gt;
         YufuTestUser
        &lt;/saml:NameID&gt;
        &lt;saml:SubjectConfirmation
          Method=&quot;urn:oasis:names:tc:SAML:2.0:cm:bearer&quot;&gt;
          &lt;saml:SubjectConfirmationData
            InResponseTo=&quot;_049917a6-1183-42fd-a190-1d2cbaf9b144&quot;
            Recipient=&quot;https://sp.example.com/SAML2/SSO/POST&quot;
            NotOnOrAfter=&quot;2019-01-01T01:00:00Z&quot;/&gt;
        &lt;/saml:SubjectConfirmation&gt;
      &lt;/saml:Subject&gt;
      &lt;saml:Conditions
        NotBefore=&quot;2019-01-01T00:55:00Z &quot;
        NotOnOrAfter=&quot;2019-01-01T01:05:00Z &quot;&gt;
        &lt;saml:AudienceRestriction&gt;
        &lt;saml:Audience&gt;https://www.***.com&lt;/saml:Audience&gt;
        &lt;/saml:AudienceRestriction&gt;
      &lt;/saml:Conditions&gt;
      &lt;saml:AuthnStatement
        AuthnInstant=&quot;2020-01-01T00:00:00Z&quot;
        SessionIndex=&quot;_82b251d1-4796-46d3-b903-c85c9ae49172&quot;&gt;
        &lt;saml:AuthnContext&gt;
          &lt;saml:AuthnContextClassRef&gt;        urn:oasis:names:tc:SAML:2.0:ac:classes:PasswordProtectedTransport
         &lt;/saml:AuthnContextClassRef&gt;
        &lt;/saml:AuthnContext&gt;
      &lt;/saml:AuthnStatement&gt;
    &lt;/saml:Assertion&gt;
  &lt;/samlp:Response&gt;
</code></pre>]]></content>
      <tags>
        <tag>OIDC</tag>
        <tag>SAML</tag>
        <tag>SSO</tag>
      </tags>
  </entry>
  <entry>
    <title>浅谈 LDAP password storage scheme</title>
    <url>/2019/12/27/ldap_password_storage_scheme/</url>
    <content><![CDATA[<h2 id="LDAP-密码存储格式"><a href="#LDAP-密码存储格式" class="headerlink" title="LDAP 密码存储格式"></a>LDAP 密码存储格式</h2><p><img src="/images/ldap_password.png" alt=""></p>
<blockquote>
<p>如图为一个密码为password的密码，在LDAP中的存储 Password Preview。</p>
</blockquote>
<a id="more"></a> 


<h2 id="LDAP-密码加密过程"><a href="#LDAP-密码加密过程" class="headerlink" title="LDAP 密码加密过程"></a>LDAP 密码加密过程</h2><blockquote>
<p>图中所示的加密方式为 SSHA-256加密方式 （即SHA-256 带Salt方式）</p>
</blockquote>
<h3 id="加密过程解读"><a href="#加密过程解读" class="headerlink" title="加密过程解读"></a>加密过程解读</h3><ul>
<li><a href="https://www.browserling.com/tools/text-to-hex" target="_blank" rel="noopener">password -&gt; Hex</a> 得到 <pre><code>70 61 73 73 77 6f 72 64</code></pre></li>
<li>password Hex(70 61 73 73 77 6f 72 64) + Salt Hex(a3 17 fc 05 16 f8 2c 4d) <pre><code>70 61 73 73 77 6f 72 64 a3 17 fc 05 16 f8 2c 4d</code></pre></li>
<li><a href="https://www.fileformat.info/tool/hash.htm?hex=70617373776f7264a317fc0516f82c4d" target="_blank" rel="noopener">Binary hash</a></li>
</ul>
<p><img src="/images/sha-256_result.png" alt=""></p>
<ul>
<li>如图 得到 SHA-256 哈希结果为</li>
</ul>
<pre><code>f818a581e113b53d96a8308ae43e572329dc09b8f883afbdc60d3aaebdc0def7</code></pre><ul>
<li>密码哈希值 + Salt Hex —<a href="https://base64.guru/converter/encode/hex" target="_blank" rel="noopener">Base64</a>—&gt;</li>
</ul>
<pre><code>+BilgeETtT2WqDCK5D5XIyncCbj4g6+9xg06rr3A3vejF/wFFvgsTQ==</code></pre><ul>
<li>最终Ldap的密码存储方式为 {CRYPT}Base64(Password Hex + Salt Hex)</li>
</ul>
<pre><code>{SSHA256}+BilgeETtT2WqDCK5D5XIyncCbj4g6+9xg06rr3A3vejF/wFFvgsTQ==
</code></pre>]]></content>
      <tags>
        <tag>LDAP</tag>
        <tag>password</tag>
      </tags>
  </entry>
  <entry>
    <title>Hash算法与密码存储</title>
    <url>/2019/12/26/password_stored_and_hash/</url>
    <content><![CDATA[<h2 id="什么是Hash-算法"><a href="#什么是Hash-算法" class="headerlink" title="什么是Hash 算法"></a>什么是Hash 算法</h2><blockquote>
<p><strong>散列算法（Hash Algorithm）</strong>，又称哈希算法，杂凑算法，是把任意长度的输入，通过散列算法变换成固定长度的输出，该输出就是散列值。这种转换是一种压缩映射。</p>
</blockquote>
<a id="more"></a> 
<p>一个优秀的 hash 算法，将能实现：</p>
<ul>
<li>正向快速：给定明文和 hash 算法，在有限时间和有限资源内能计算出 hash 值。</li>
<li>逆向困难：给定（若干） hash 值，在有限时间内很难（基本不可能）逆推出明文。</li>
<li>输入敏感：原始输入信息修改一点信息，产生的 hash 值看起来应该都有很大不同。</li>
<li>冲突避免：很难找到两段内容不同的明文，使得它们的 hash 值一致（发生冲突）。即对于任意两个不同的数据块，其hash值相同的可能性极小；对于一个给定的数据块，找到和它hash值相同的数据块极为困难。</li>
</ul>
<h2 id="Hash算法是如何实现的"><a href="#Hash算法是如何实现的" class="headerlink" title="Hash算法是如何实现的"></a>Hash算法是如何实现的</h2><p>写一个最简单的Hash算法  对任意数 取模运算    这个也很简单的实现了 用较少的文本量代表很长的内容</p>
<pre><code>    public static void main(String[] args) {
        System.out.println(hash(5));
    }

    public static Integer hash(Integer s) {
        return s % 4;
    }</code></pre><p>当然这个很容易就可以发现规律，实际算法中可能会有异或 移位 加更多的循环 等 ，来加强散列函数的可靠性</p>
<h2 id="Hash在在密码学中的应用"><a href="#Hash在在密码学中的应用" class="headerlink" title="Hash在在密码学中的应用"></a>Hash在在密码学中的应用</h2><p>当我们登录某个系统时，输入的密码在数据库一般不可能明文存储的，普遍是使用hash算法生成一个密码的签名，只保存这个签名值，由于hash算法是不可逆的，那么黑客即便得到这个签名，也丝毫没有用处，下次登录时，后台会重新计算Hash，与网站中储存的原hash值进行比对，如果相同，证明你拥有这个账户的密码，那么就会允许你登陆，当然现有的系统 或者说其他安全的领域，都会在密码上加一些salt(随机生成的Byte数组，然后Base64 encode存入库的)，即使密码hash被暴露了，也可以有效的防治字典攻击。</p>
<p>在这些应用场景里，对于抗碰撞和抗篡改能力要求极高，对速度的要求在其次。一个设计良好的hash算法，其抗碰撞能力是很高的。以MD5为例，其输出长度为128位，设计预期碰撞概率为2^128，这是一个极小极小的数字，也就是说，至少需要找2^128次才能有1次的概率来找到一个与目标文件相同的hash值。</p>
<h2 id="Hash有哪些流行的算法"><a href="#Hash有哪些流行的算法" class="headerlink" title="Hash有哪些流行的算法"></a>Hash有哪些流行的算法</h2><blockquote>
<p><strong>SHA （Secure Hash Algorithm）</strong>是一个 Hash 函数族，由 NIST（National Institute of Standards and Technology）于 1993 年发布第一个算法。</p>
</blockquote>
<p>为了提高安全性，NIST 还设计出了 SHA-224、SHA-256、SHA-384，和 SHA-512 算法，跟 SHA-1 算法原理类似。SHA-3 算法是yufu现在在用的算法。</p>
<p>所说的上面这几种流行的算法，它们最重要的一点区别就是 <strong>“强抗碰撞性”</strong>。</p>
<blockquote>
<blockquote>
<p>什么是强抗碰撞性呢？像刚刚我们举的Hash算法实现的例子，任何数对4取模  那么得到的结果只会有4种，也就是说随便拿5个数 去算  就至少会得到两个相同的值，这种情况就叫做散列算法的碰撞。</p>
</blockquote>
</blockquote>
]]></content>
      <tags>
        <tag>password</tag>
        <tag>Hash</tag>
      </tags>
  </entry>
</search>
